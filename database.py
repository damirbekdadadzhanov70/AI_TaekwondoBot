# database.py ‚Äî –ü—Ä–æ—Å—Ç–∞—è SQLite-–±–∞–∑–∞ –¥–ª—è KukkiDo
from __future__ import annotations
import os, datetime as dt, json
from typing import Dict, Any, List, Optional
import sqlite3 as sql
import threading

# –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory DB –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –∏–Ω–∞—á–µ —Ñ–∞–π–ª
DB_PATH = os.getenv("DB_PATH", os.path.join(os.getenv("DATA_DIR", "./data"), "kukkido.db"))
os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite
_LOCK = threading.RLock()
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å/–∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ)
_CONN: Optional[sql.Connection] = None


# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï ---
def _get_conn() -> sql.Connection:
    global _CONN
    if _CONN is None:
        _CONN = sql.connect(DB_PATH, check_same_thread=False)
        _CONN.row_factory = sql.Row  # —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å–ª–æ–≤–∞—Ä—å (dict)
    return _CONN


def load_profiles():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–µ–º—É, —Ç.–∫. –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
    _init_db()


def _init_db():
    conn = _get_conn()
    c = conn.cursor()

    # 1. –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π (profiles)
    c.execute("""
        CREATE TABLE IF NOT EXISTS profiles (
            user_id TEXT PRIMARY KEY,
            role TEXT DEFAULT 'coach', -- –¢–µ–ø–µ—Ä—å role –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            age INTEGER,
            height INTEGER,
            weight REAL,
            notes TEXT
        )
    """)

    # 2. –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ (history)
    c.execute("""
        CREATE TABLE IF NOT EXISTS history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT,
            timestamp TEXT,
            type TEXT, -- 'plan', 'template_save', etc.
            data TEXT -- JSON-—Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        )
    """)

    # 3. –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ (templates)
    c.execute("""
        CREATE TABLE IF NOT EXISTS templates (
            user_id TEXT,
            name TEXT,
            plan TEXT,
            params TEXT,
            created TEXT,
            PRIMARY KEY (user_id, name) -- –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )
    """)

    # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å role —Å—Ç–∞—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º,
    # –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ö–æ—Ç—è —ç—Ç–æ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–µ–π)
    # –°–µ–π—á–∞—Å –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤ get_or_create_profile –∏—Å–ø—Ä–∞–≤–∏—Ç —ç—Ç–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.

    conn.commit()


def get_or_create_profile(user_id: int) -> Dict[str, Any]:
    uid = str(user_id)
    with _LOCK:
        conn = _get_conn()

        # 1. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        cursor = conn.execute("SELECT * FROM profiles WHERE user_id = ?", (uid,))
        row = cursor.fetchone()

        if row:
            # –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω
            d = dict(row)
            # üåü –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏,
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 'coach' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if 'role' not in d or d['role'] is None:
                d['role'] = 'coach'
                # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ë–î, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å

            d['notes'] = json.loads(d['notes'])  # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON-—Å—Ç—Ä–æ–∫–∏
            return d
        else:
            # 2. –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            default_profile = {
                'user_id': uid,
                'role': 'coach',  # <--- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ role –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'age': 0,
                'height': 0,
                'weight': 0.0,
                'notes': json.dumps({})  # –ü—É—Å—Ç–æ–π JSON –¥–ª—è notes
            }

            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            conn.execute("""
                INSERT INTO profiles (user_id, role, age, height, weight, notes)
                VALUES (:user_id, :role, :age, :height, :weight, :notes)
            """, default_profile)
            conn.commit()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            return {
                'user_id': uid,
                'role': 'coach',
                'age': 0,
                'height': 0,
                'weight': 0.0,
                'notes': {}
            }


def update_profile(user_id: int, data: Dict[str, Any]) -> None:
    uid = str(user_id)
    with _LOCK:
        conn = _get_conn()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        notes_json = json.dumps(data.get('notes', {}), ensure_ascii=False)

        conn.execute("""
            UPDATE profiles SET
            role = ?,
            age = ?,
            height = ?,
            weight = ?,
            notes = ?
            WHERE user_id = ?
        """, (
            data.get('role', 'coach'),
            data.get('age', 0),
            data.get('height', 0),
            data.get('weight', 0.0),
            notes_json,
            uid
        ))
        conn.commit()


# ---- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å—Ç–æ—Ä–∏—è) ----
def add_log_entry(user_id: int, data: Dict[str, Any]) -> None:
    uid = str(user_id)
    with _LOCK:
        conn = _get_conn()
        timestamp = dt.datetime.now(dt.timezone.utc).isoformat(timespec="seconds")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Å—Ç—Ä–æ–∫—É
        data_json = json.dumps(data, ensure_ascii=False)

        conn.execute("""
            INSERT INTO history (user_id, timestamp, type, data)
            VALUES (?, ?, ?, ?)
        """, (uid, timestamp, data.get('type', 'unknown'), data_json))

        conn.commit()


def get_logs(user_id: int, limit: int) -> List[Dict[str, Any]]:
    uid = str(user_id)
    with _LOCK:
        conn = _get_conn()
        cursor = conn.execute("""
            SELECT timestamp, type, data FROM history 
            WHERE user_id = ? 
            ORDER BY timestamp DESC
            LIMIT ?
        """, (uid, limit))

        logs = []
        for row in cursor.fetchall():
            d = dict(row)
            # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON-—Å—Ç—Ä–æ–∫–∏ –≤ Dict
            try:
                d['data'] = json.loads(d['data'])
            except:
                d['data'] = {}
            logs.append(d)

        return logs


# ---- —à–∞–±–ª–æ–Ω—ã —Ç—Ä–µ–Ω–µ—Ä–∞ ----
def save_template(user_id: int, name: str, plan_text: str, params: Dict[str, Any]) -> None:
    uid = str(user_id)
    with _LOCK:
        conn = _get_conn()
        created_dt = dt.datetime.now(dt.timezone.utc).isoformat(timespec="seconds")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ params –≤ JSON-—Å—Ç—Ä–æ–∫—É
        params_json = json.dumps(params, ensure_ascii=False)

        conn.execute("""
            INSERT OR REPLACE INTO templates (user_id, name, plan, params, created)
            VALUES (?, ?, ?, ?, ?)
        """, (uid, name, plan_text, params_json, created_dt))

        conn.commit()


def list_templates(user_id: int) -> List[Dict[str, Any]]:
    uid = str(user_id)
    with _LOCK:
        conn = _get_conn()
        cursor = conn.execute("""
            SELECT name, plan, params, created FROM templates 
            WHERE user_id = ? 
            ORDER BY created DESC
        """, (uid,))

        templates = []
        for row in cursor.fetchall():
            d = dict(row)
            # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON-—Å—Ç—Ä–æ–∫–∏ –≤ Dict
            try:
                d['params'] = json.loads(d['params'])
            except:
                d['params'] = {}
            templates.append(d)

        return templates


# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
_init_db()
