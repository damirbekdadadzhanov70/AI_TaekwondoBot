# main.py ‚Äî —è–¥—Ä–æ –±–æ—Ç–∞: —Ä–æ–ª–∏, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, —Å—Ç–∞—Ä—Ç-–º–µ–Ω—é –∏ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –º–∞—Å—Ç–µ—Ä /plan
# –¢—Ä–µ–±—É–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã: config.py –∏ database.py (–∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞).

from __future__ import annotations
import logging
import traceback  # –ù–û–í–û–ï: –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
from typing import Optional
import json  # –ù–û–í–´–ô –ö–û–î: –ù—É–∂–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∏–∑ Mini App

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters
)

from openai import OpenAI  # OpenAI SDK v1.x

from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, MODEL_NAME, TEMPERATURE
from database import get_or_create_profile, update_profile, attach_visuals, load_profiles

# ------------------------------------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("AI_TaekwondoBot")


# ------------------------------------------------- –£–¢–ò–õ–ò–¢–´ –ö–õ–ê–í–ò–ê–¢–£–†
def _kb(rows):  # reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)


def role_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–ø–æ—Ä—Ç—Å–º–µ–Ω ü•ã", callback_data="set_role_athlete")],
        [InlineKeyboardButton("–¢—Ä–µ–Ω–µ—Ä üßë‚Äçüè´", callback_data="set_role_coach")],
    ])


# ------------------------------------------------- /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int | None:
    user = update.effective_user
    user_id = user.id
    name = user.first_name or "–¥—Ä—É–≥"
    profile = get_or_create_profile(user_id)

    role = profile.get("role", "athlete")
    role_human = "–°–ø–æ—Ä—Ç—Å–º–µ–Ω" if role == "athlete" else "–¢—Ä–µ–Ω–µ—Ä"

    if role == "coach":
        text = (
            f"ü•ã –ü—Ä–∏–≤–µ—Ç, *{name}*!\n"
            f"–†–æ–ª—å: **{role_human}**\n\n"
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–ø–ø—ã –∏ —Ü–µ–ª–µ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–±–µ—Ä–µ–º –≤ –º–∞—Å—Ç–µ—Ä–µ /plan.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    else:
        age = profile.get("age", "‚Äî")
        height = profile.get("height", "‚Äî")
        weight = profile.get("weight", "‚Äî")
        text = (
            f"ü•ã –ü—Ä–∏–≤–µ—Ç, *{name}*!\n"
            f"–†–æ–ª—å: **{role_human}**\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age} | –†–æ—Å—Ç: {height} —Å–º | –í–µ—Å: {weight} –∫–≥\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="open_profile")],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="open_role_picker")],
    ])

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=kb,
            parse_mode="Markdown"
        )
    elif update.message:
        await update.message.reply_text(
            text=text,
            reply_markup=kb,
            parse_mode="Markdown"
        )

    return ConversationHandler.END


# ------------------------------------------------- /role (–∫–æ–º–∞–Ω–¥–∞) + callbacks
async def role_command(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    p = get_or_create_profile(update.effective_user.id)
    role_human = "–°–ø–æ—Ä—Ç—Å–º–µ–Ω" if p.get("role", "athlete") == "athlete" else "–¢—Ä–µ–Ω–µ—Ä"
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: *{role_human}*.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:",
        reply_markup=role_kb(),
        parse_mode="Markdown"
    )


async def cb_open_role(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:", reply_markup=role_kb())


async def cb_set_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "set_role_athlete":
        update_profile(uid, role="athlete")
    elif q.data == "set_role_coach":
        update_profile(uid, role="coach")

    await start_command(update, context)


# ------------------------------------------------- –ü–†–û–§–ò–õ–¨ (Mini App)
# –í–ê–® –ê–î–†–ï–°:
YOUR_APP_URL = "https://damirbekdadadzhanov70.github.io/AI_TaekwondoBot/profile_app.html"


# main.py, —Å—Ç—Ä–æ–∫–∞ ~150
# ...
# ------------------------------------------------- –ü–†–û–§–ò–õ–¨ (Mini App)
# ...

async def handle_profile_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON-–¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ñ–∏–ª–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ Mini App."""
    if not update.message.web_app_data:
        return

    data = update.message.web_app_data.data
    uid = update.effective_user.id

    # üí° –ù–û–í–´–ô –ö–û–î –î–õ–Ø –î–ï–ë–ê–ì–ê
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Mini App –æ—Ç {uid}: {data}")

    try:
        profile_data = json.loads(data)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        age = int(profile_data.get("age", 0))
        height = int(profile_data.get("height", 0))
        weight = float(profile_data.get("weight", 0))

        # üí° –ù–û–í–´–ô –ö–û–î –î–õ–Ø –î–ï–ë–ê–ì–ê
        logger.info(f"Parsed data: age={age}, height={height}, weight={weight}")

        if age >= 4 and height >= 80 and weight >= 15:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py
            saved = update_profile(uid, age=age, height=height, weight=weight)

            # üí° –ù–û–í–´–ô –ö–û–î –î–õ–Ø –î–ï–ë–ê–ì–ê
            logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å {uid} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞.")

            await update.message.reply_text(
                "‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Mini App*.\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {saved['age']} | –†–æ—Å—Ç: {saved['height']} —Å–º | –í–µ—Å: {saved['weight']} –∫–≥",
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")

    except Exception as e:
        # üí° –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å traceback
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö Mini App –¥–ª—è {uid}: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö Mini App: {e}")


# –ù–û–í–´–ô –ö–û–î / –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ—Ç Mini App –≤–º–µ—Å—Ç–æ –¥–∏–∞–ª–æ–≥–∞
async def profile_command(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    role = get_or_create_profile(uid).get("role", "athlete")

    if role == "coach":
        await update.message.reply_text(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            "–í–æ–∑—Ä–∞—Å—Ç/—É—Ä–æ–≤–µ–Ω—å/–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —É–∫–∞–∂–µ—Ç–µ –ø—Ä—è–º–æ –≤ –º–∞—Å—Ç–µ—Ä–µ /plan."
        )
        return

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (Mini App)", web_app={"url": YOUR_APP_URL})]
    ])

    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –≤ —É–¥–æ–±–Ω–æ–º –æ–∫–Ω–µ:",
        reply_markup=kb
    )
    return


# –ù–û–í–´–ô –ö–û–î / –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ—Ç Mini App –∏–∑ –∫–Ω–æ–ø–∫–∏
async def profile_from_button(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()

    uid = q.from_user.id
    if get_or_create_profile(uid).get("role", "athlete") == "coach":
        await q.edit_message_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–¥–∏—Ç–µ –≤ /plan.")
        return

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (Mini App)", web_app={"url": YOUR_APP_URL})]
    ])

    await q.edit_message_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –≤ —É–¥–æ–±–Ω–æ–º –æ–∫–Ω–µ:",
        reply_markup=kb
    )
    return


# ------------------------------------------------- /plan ‚Äî –º–∞—Å—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
# —Å–æ—Å—Ç–æ—è–Ω–∏—è
P_COACH_AGE, P_COACH_GOAL, P_COACH_INV, P_COACH_DUR, \
    P_ATH_GOAL, P_ATH_LOC, P_ATH_INV, P_ATH_DUR = range(100, 108)

PLAN_GOALS = ["–°–∫–æ—Ä–æ—Å—Ç—å", "–°–∏–ª–∞", "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "–ì–∏–±–∫–æ—Å—Ç—å", "–õ–æ–≤–∫–æ—Å—Ç—å", "–°—Ç–∞—Ç–∏–∫–∞", "–ò–≥—Ä–æ–≤–∞—è", "–î—Ä—É–≥–æ–µ"]
DURATIONS = ["30", "45", "60"]
YN = [["–î–∞"], ["–ù–µ—Ç"]]
ATH_LOC = [["–ó–∞–ª"], ["–î–æ–º"], ["–£–ª–∏—Ü–∞"]]


async def plan_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    p = get_or_create_profile(update.effective_user.id)
    role = p.get("role", "athlete")
    context.user_data["plan"] = {}

    if role == "coach":
        await update.message.reply_text(
            "–î–ª—è –∫–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å–µ–π—á–∞—Å –ø–ª–∞–Ω? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8‚Äì10 / 10‚Äì12 / —Å–º–µ—à–∞–Ω–Ω–∞—è)",
            reply_markup=ReplyKeyboardRemove()
        )
        return P_COACH_AGE
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:", reply_markup=_kb([[g] for g in PLAN_GOALS]))
        return P_ATH_GOAL


# --- —Ç—Ä–µ–Ω–µ—Ä (–û—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def p_coach_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["plan"]["group_age"] = update.message.text.strip()
    await update.message.reply_text("–ö–∞–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≤–∏–≤–∞–µ–º?", reply_markup=_kb([[g] for g in PLAN_GOALS]))
    return P_COACH_GOAL


async def p_coach_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["plan"]["goal"] = update.message.text.strip()
    await update.message.reply_text("–ï—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–ª–∞–ø–∞/—ç–ª–∞—Å—Ç–∏–∫/–∫–æ–Ω—ã –∏ —Ç.–ø.)?", reply_markup=_kb(YN))
    return P_COACH_INV


async def p_coach_inv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["plan"]["inventory"] = (update.message.text.strip().lower() == "–¥–∞")
    await update.message.reply_text("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –º–∏–Ω—É—Ç:", reply_markup=_kb([[d] for d in DURATIONS]))
    return P_COACH_DUR


async def p_coach_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    duration = int(update.message.text.strip()) if update.message.text.strip().isdigit() else 60
    context.user_data["plan"]["duration"] = duration
    prof = get_or_create_profile(update.effective_user.id)
    params = context.user_data["plan"].copy() | {"role": "coach"}
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ _generate_and_send_plan (–≤–∞—à –∫–æ–¥ –æ–ø—É—â–µ–Ω)
    # await _generate_and_send_plan(update, context, prof, params)
    context.user_data.pop("plan", None)
    return ConversationHandler.END


# --- —Å–ø–æ—Ä—Ç—Å–º–µ–Ω (–û—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def p_ath_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["plan"]["goal"] = update.message.text.strip()
    await update.message.reply_text("–ì–¥–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è?", reply_markup=_kb(ATH_LOC))
    return P_ATH_LOC


async def p_ath_loc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["plan"]["location"] = update.message.text.strip()
    await update.message.reply_text("–ï—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å?", reply_markup=_kb(YN))
    return P_ATH_INV


async def p_ath_inv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["plan"]["inventory"] = (update.message.text.strip().lower() == "–¥–∞")
    await update.message.reply_text("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –º–∏–Ω—É—Ç:", reply_markup=_kb([[d] for d in DURATIONS]))
    return P_ATH_DUR


async def p_ath_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    duration = int(update.message.text.strip()) if update.message.text.strip().isdigit() else 60
    context.user_data["plan"]["duration"] = duration
    prof = get_or_create_profile(update.effective_user.id)
    params = context.user_data["plan"].copy() | {"role": "athlete"}
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ _generate_and_send_plan (–≤–∞—à –∫–æ–¥ –æ–ø—É—â–µ–Ω)
    # await _generate_and_send_plan(update, context, prof, params)
    context.user_data.pop("plan", None)
    return ConversationHandler.END


async def plan_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.pop("plan", None)
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ /plan, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# ------------------------------------------------- OpenAI client (+ /diag)
_openai_client: Optional[OpenAI] = None


def get_client() -> OpenAI:
    global _openai_client
    if _openai_client is None:
        if not OPENAI_API_KEY:
            raise RuntimeError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env.")
        _openai_client = OpenAI(api_key=OPENAI_API_KEY)
    return _openai_client


async def diag(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        c = get_client()
        r = c.chat.completions.create(model=MODEL_NAME, messages=[{"role": "user", "content": "ping"}], max_tokens=2)
        _ = r.choices[0].message.content
        await update.message.reply_text(f"‚úÖ OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–¥–µ–ª—å: {MODEL_NAME}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


# ------------------------------------------------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö
def main() -> None:
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env!")
        return

    load_profiles()

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("role", role_command))
    app.add_handler(CommandHandler("diag", diag))

    # –ù–û–í–´–ô –ö–û–î / –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Mini App
    app.add_handler(CommandHandler("profile", profile_command))
    app.add_handler(CallbackQueryHandler(profile_from_button, pattern=r"^open_profile$"))

    # üåü –ö–õ–Æ–ß–ï–í–û–ô –•–ï–ù–î–õ–ï–†: –õ–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ Mini App –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_profile_data))

    # –í—ã–±–æ—Ä/—Å–º–µ–Ω–∞ —Ä–æ–ª–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(cb_open_role, pattern=r"^open_role_picker$"))
    app.add_handler(CallbackQueryHandler(cb_set_role, pattern=r"^set_role_"))

    # –ú–∞—Å—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è ConversationHandler)
    plan_conv = ConversationHandler(
        entry_points=[CommandHandler("plan", plan_entry)],
        states={
            # —Ç—Ä–µ–Ω–µ—Ä
            P_COACH_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, p_coach_age)],
            P_COACH_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, p_coach_goal)],
            P_COACH_INV: [MessageHandler(filters.TEXT & ~filters.COMMAND, p_coach_inv)],
            P_COACH_DUR: [MessageHandler(filters.TEXT & ~filters.COMMAND, p_coach_finish)],
            # —Å–ø–æ—Ä—Ç—Å–º–µ–Ω
            P_ATH_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, p_ath_goal)],
            P_ATH_LOC: [MessageHandler(filters.TEXT & ~filters.COMMAND, p_ath_loc)],
            P_ATH_INV: [MessageHandler(filters.TEXT & ~filters.COMMAND, p_ath_inv)],
            P_ATH_DUR: [MessageHandler(filters.TEXT & ~filters.COMMAND, p_ath_finish)],
        },
        fallbacks=[
            CommandHandler("cancel", plan_cancel),
            CommandHandler("start", start_command)
        ],
    )
    app.add_handler(plan_conv)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()