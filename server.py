# server.py ‚Äî FastAPI backend for KukkiDo Mini‚ÄëApp (coach mode inside WebApp)
from __future__ import annotations
import json, re, random, datetime as dt
from typing import Dict, Any, List, Optional

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

from config import OPENAI_API_KEY, MODEL_NAME, TEMPERATURE
from database import (
    load_profiles, load_logs,
    get_or_create_profile, update_profile,
    add_log_entry, list_templates, save_template, get_logs,
)

def _recent_blocks(user_id: int, days: int = 14, max_plans: int = 10) -> List[str]:
    def _extract(plan_text: str) -> List[str]:
        names = re.findall(r"–°—Ç–∞–Ω—Ü–∏—è\\s+[A-Z–ê-–Ø]\\s+‚Äî\\s+([^:]+):", plan_text)
        return [n.strip().lower() for n in names]
    ans: List[str] = []
    for rec in reversed(get_logs(user_id, limit=100)):
        if rec.get("type") != "plan":
            continue
        iso = rec.get("dt")
        try:
            when = dt.datetime.fromisoformat(iso.replace("Z","+00:00"))
        except Exception:
            when = None
        if when and (dt.datetime.now(dt.timezone.utc) - when).days > days:
            continue
        ans.extend(_extract(rec.get("plan","")))
        max_plans -= 1
        if max_plans <= 0: break
    seen=set(); uniq=[]
    for x in ans:
        if x not in seen:
            seen.add(x); uniq.append(x)
    return uniq

def rule_based_coach_plan(user_id: int, params: Dict[str, Any]) -> str:
    goal = params.get("goal", "–û–±—â–∞—è")
    duration = int(params.get("duration", 45))
    loc = params.get("location", "–ó–∞–ª")
    inv_list = params.get("inventory_list") or []
    inv = bool(inv_list) or bool(params.get("inventory", False))
    ageb = params.get("age_band", "U13")
    group_size = int(params.get("group_size", 10))

    warm = 8 if duration >= 40 else 6
    block = max(2, (duration - warm - 6) // 8)
    cool = 5

    if ageb in ("U9","U11"):
        age_note = "–§–æ–∫—É—Å: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è, —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏, –º–∞–ª—ã–π –æ–±—ä—ë–º, –∏–≥—Ä–æ–≤–∞—è —Ñ–æ—Ä–º–∞. –ò–∑–±–µ–≥–∞–π –∂—ë—Å—Ç–∫–æ–π —Å–∏–ª–æ–≤–æ–π."
    elif ageb in ("U13",):
        age_note = "–§–æ–∫—É—Å: —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ‚Äë—Å–∏–ª–æ–≤–∞—è, –ª–æ–≤–∫–æ—Å—Ç—å, —Ç–µ—Ö–Ω–∏–∫–∞ –±–µ–≥–∞/–ø—Ä—ã–∂–∫–∞. –û–±—ä—ë–º —É–º–µ—Ä–µ–Ω–Ω—ã–π."
    elif ageb in ("U17",):
        age_note = "–§–æ–∫—É—Å: —Å–∏–ª–∞/–º–æ—â–Ω–æ—Å—Ç—å + —Å–∫–æ—Ä–æ—Å—Ç—å, –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å."
    else:
        age_note = "–§–æ–∫—É—Å: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏, RPE 7‚Äì8 –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª–æ–∫–∞—Ö."

    have = {k: True for k in inv_list}
    speed_pool = [
        ("–°—Ç–∞—Ä—Ç—ã/—Ä–µ–∞–∫—Ü–∏—è 10‚Äì15 –º", "6√ó (1‚Äì2 –ø–æ–ø—ã—Ç–∫–∏/–º–∏–Ω), –±–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö; —Å–∏–≥–Ω–∞–ª —Ö–ª–æ–ø–æ–∫/—Å–≤–∏—Å—Ç–æ–∫" + (" + –∫–æ–Ω—É—Å—ã" if have.get("cones") else "")),
        ("–ü–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞ (–ø—Ä—ã–∂–∫–∏/–ø–æ–¥—Å–∫–æ–∫–∏)", "3√ó6, —Ç–µ—Ö–Ω–∏–∫–∞/–º—è–≥–∫–∞—è –ø–æ—Å–∞–¥–∫–∞"),
        ("–õ–µ—Å—Ç–Ω–∏—Ü–∞/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è" + (" (–ª–µ—Å—Ç–Ω–∏—Ü–∞)" if have.get("ladder") else ""), "6‚Äì8 –ø—Ä–æ—Ö–æ–¥–æ–≤, –∑–∞—Ç–µ–º COD 5‚Äì10‚Äì5, 4√ó"),
        ("–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ü–≤–µ—Ç/–∑–≤—É–∫", "–∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–Ω–µ—Ä–∞, 8√ó20‚Äì30—Å"),
        ("–°–ø—Ä–∏–Ω—Ç—ã 3√ó(10+10)", "—Ä–∞–∑–≤–æ—Ä–æ—Ç, –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è; –æ—Ç–¥—ã—Ö 60‚Äì90—Å"),
    ]
    strength_pool = [
        ("–ü—Ä–∏—Å–µ–¥/–≤—ã–ø–∞–¥—ã (–º–∞—Å—Å–∞ —Ç–µ–ª–∞)", "4√ó10, RPE 7; –º–∞—Å—à—Ç–∞–± –ø–æ —É—Ä–æ–≤–Ω—é"),
        ("–û—Ç–∂–∏–º–∞–Ω–∏—è + –ø–ª–∞–Ω–∫–∞", "3√ó8‚Äì12 + 3√ó30‚Äì45—Å"),
        ("–¢—è–≥–∞ —Ä–µ–∑–∏–Ω–∫–∏/–∞–Ω—Ç–∏‚Äë–≤—Ä–∞—â–µ–Ω–∏–µ" if have.get("bands") else "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç", "3√ó12 / 3√ó12‚Äì15"),
        ("–†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ —Å –º—è—á–æ–º/–ø–∞—Ä—Ç–Ω—ë—Ä–æ–º" if have.get("ball") else "–ì–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏–∏", "3√ó10‚Äì12"),
        ("–ö–æ—Ä: dead bug / hollow hold", "3√ó20‚Äì30—Å"),
    ]
    endur_pool = [
        ("–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã 30/30", f"{'—Å–∫–∞–∫–∞–ª–∫–∞' if have.get('rope') else '–±–µ–≥'} 8√ó, RPE 7"),
        ("–ö—Ä—É–≥ –û–§–ü", "–¥–∂–∞–º–ø–∏–Ω–≥‚Äë–¥–∂–µ–∫ 20, –≥–æ—Ä–∫–∞ 10, —Å–∫–∞–ª–æ–ª–∞–∑ 20, –ø—Ä–∏—Å–µ–¥ 15 ‚Äî 3 –∫—Ä—É–≥–∞"),
        ("–ß–µ–ª–Ω–æ—á–Ω—ã–µ 5‚Äì10‚Äì5 / —ç—Å—Ç–∞—Ñ–µ—Ç—ã", "6‚Äì8 –ø–æ–≤—Ç–æ—Ä–æ–≤, –∏–≥—Ä–æ–≤–∞—è —Ñ–æ—Ä–º–∞"),
        ("–§–∞—Ä—Ç–ª–µ–∫ 10 –º–∏–Ω", "—á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ 30—Å –±—ã—Å—Ç—Ä–æ / 30—Å –ª–µ–≥–∫–æ"),
    ]
    flex_pool = [
        ("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–æ–±–∏–ª–Ω–æ—Å—Ç—å", "—Ç–∞–∑–æ–±–µ–¥—Ä., –≥–æ–ª–µ–Ω–æ—Å—Ç–æ–ø, –ø–ª–µ—á–∏ ‚Äî 6‚Äì8 –º–∏–Ω"),
        ("–°—Ç–∞—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º", "10‚Äì30—Å √ó 2‚Äì4 –ø–æ–¥—Ö–æ–¥–∞/–≥—Ä—É–ø–ø–∞ –º—ã—à—Ü"),
        ("–î—ã—Ö–∞–Ω–∏–µ/—Ä–µ–ª–∏–∑", "–º—è–≥–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è + –¥—ã—Ö–∞–Ω–∏–µ 4‚Äì6 –º–∏–Ω"),
        ("PNF‚Äë—Ä–∞—Å—Ç—è–∂–∫–∞ –ª—ë–≥–∫–∞—è", "2‚Äì3 —Ä–∞—É–Ω–¥–∞, 10—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ / 20—Å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ"),
    ]
    agil_pool = [
        ("–õ–µ—Å—Ç–Ω–∏—Ü–∞/—à–∞–≥–∏" + (" (—Å –ª–µ—Å—Ç–Ω–∏—Ü–µ–π)" if have.get("ladder") else ""), "6‚Äì8 —Å–µ—Ä–∏–π –ø–æ 20‚Äì30—Å"),
        ("–ü–æ–≤–æ—Ä–æ—Ç—ã 90¬∞/180¬∞", "—Å –º–∞—Ä–∫–µ—Ä–∞–º–∏/–∫–æ–Ω—É—Å–∞–º–∏" + (" (–µ—Å—Ç—å –∫–æ–Ω—É—Å—ã)" if have.get("cones") else "")),
        ("–ò–≥—Ä–∞ –Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ", "—Å—Ç–æ–π–∫–∞ –Ω–∞ 1 –Ω–æ–≥–µ + –ª—ë–≥–∫–∏–π —Ç–æ–ª—á–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ 3√ó30—Å/–Ω–æ–≥–∞"),
        ("Reactivity tag", "—Å–∞–ª–æ—á–∫–∏ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é 3√ó2 –º–∏–Ω"),
    ]
    general_pool = [
        ("–ö—Ä—É–≥: –ø—Ä–∏—Å–µ–¥‚Äë–æ—Ç–∂–∏–º‚Äë–ø–ª–∞–Ω–∫–∞", "3√ó (15/10/40—Å), –æ—Ç–¥—ã—Ö 60‚Äì90—Å"),
        ("–°–ø—Ä–∏–Ω—Ç—ã 20 –º / —Å–∫–∞–∫–∞–ª–∫–∞ 40—Å", ("—Å–∫–∞–∫–∞–ª–∫–∞" if have.get("rope") else "–±–µ–≥") + " 4‚Äì6 –ø–æ–≤—Ç–æ—Ä–æ–≤"),
        ("–ú–æ–±–∏–ª–∏—Ç–∏ —É–∑–∫–∏—Ö –º–µ—Å—Ç", "5‚Äì6 –º–∏–Ω"),
        ("–ë—Ä–æ—Å–∫–∏ –º—è—á–∞ –æ —Å—Ç–µ–Ω—É" if have.get("ball") else "–ë–µ—Ä–ø–∏ –ª—ë–≥–∫–∏–π", "3√ó10"),
    ]
    pools = {
        "–°–∫–æ—Ä–æ—Å—Ç—å": speed_pool, "–°–∏–ª–∞": strength_pool, "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å": endur_pool,
        "–ì–∏–±–∫–æ—Å—Ç—å": flex_pool, "–õ–æ–≤–∫–æ—Å—Ç—å": agil_pool, "–û–±—â–∞—è": general_pool,
    }
    pool = pools.get(goal, general_pool)
    recent = set(_recent_blocks(user_id))
    filtered = [x for x in pool if x[0].strip().lower() not in recent] or pool
    seed = abs(hash(f"{user_id}-{dt.date.today().isoformat()}-{goal}-{ageb}-{group_size}-{duration}")) % (2**32)
    rng = random.Random(seed)
    rng.shuffle(filtered)
    chosen = filtered[:max(2, min(block, len(filtered)))]
    if len(chosen) < block:
        more = [x for x in pool if x not in chosen]
        rng.shuffle(more)
        chosen += more[:block-len(chosen)]

    head = f"‚öôÔ∏è Rule‚Äëbased | –ü–ª–∞–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã | {duration} –º–∏–Ω | {ageb} | {loc} | —Ü–µ–ª—å: {goal} | –≥—Ä—É–ø–ø–∞: {group_size} | –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {'–¥–∞' if inv else '–Ω–µ—Ç'}"
    wup  = "–†–∞–∑–º–∏–Ω–∫–∞ (RAMP) " + str(warm) + " –º–∏–Ω: –ª—ë–≥–∫–∏–π –±–µ–≥/—Å–∫–∞–∫–∞–ª–∫–∞ ‚Üí –∞–∫—Ç–∏–≤–∞—Ü–∏—è (—è–≥–æ–¥–∏—Ü—ã/–∫–æ—Ä) ‚Üí –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è (—Ç–∞–∑–æ–±–µ–¥—Ä., –≥–æ–ª–µ–Ω–æ—Å—Ç–æ–ø, –ø–ª–µ—á–∏) ‚Üí 2‚Äì3 —É—Å–∫–æ—Ä–µ–Ω–∏—è."
    st_txt = [f"–°—Ç–∞–Ω—Ü–∏—è {chr(65+i)} ‚Äî {title}: {spec} (~8 –º–∏–Ω)" for i,(title,spec) in enumerate(chosen)]
    game = "–ò–≥—Ä–∞/—Å–ø–∞—Ä—Ä–∏–Ω–≥ –ª–∞–π—Ç 6‚Äì8 –º–∏–Ω (—Ç–µ—Ö–Ω–∏–∫–∞ > –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, RPE 6‚Äì7)."
    cool = f"–ó–∞–º–∏–Ω–∫–∞ {cool} –º–∏–Ω: —Ö–æ–¥—å–±–∞ + —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ (10‚Äì30—Å √ó 2‚Äì4 –ø–æ–¥—Ö–æ–¥–∞)."
    coach = "–ó–∞–º–µ—Ç–∫–∏ —Ç—Ä–µ–Ω–µ—Ä—É: " + age_note + "\\n‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å RPE: –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ ~7‚Äì8, —Ç–µ—Ö–Ω–∏–∫–∞ ~4‚Äì6.\\n‚Ä¢ –î–µ–ª–∏–º –Ω–∞ 2‚Äì3 –ø–æ–¥–≥—Ä—É–ø–ø—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π."
    return f"{head}\\n\\n{wup}\\n\\n" + "\\n".join(f"- {x}" for x in st_txt) + f"\\n\\n- {game}\\n\\n{cool}\\n\\n{coach}"

def _openai_client():
    if not OPENAI_API_KEY:
        return None
    try:
        import openai  # type: ignore
    except Exception:
        return None
    openai.api_key = OPENAI_API_KEY
    return openai

def gpt_coach_plan(profile: Dict[str, Any], user_id: int, params: Dict[str, Any], notes: str) -> Optional[str]:
    client = _openai_client()
    if not client:
        return None
    recent = _recent_blocks(user_id)
    # üåü –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢
    sys = (
        "–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä-–º–µ—Ç–æ–¥–∏—Å—Ç –ø–æ —Ç—Ö—ç–∫–≤–æ–Ω–¥–æ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ **–¢–µ–æ—Ä–∏–∏ –§–∏–∑–∏—á–µ—Å–∫–æ–π –ö—É–ª—å—Ç—É—Ä—ã (–¢–§–ö)**. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π **—Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º —Ä–∞–∑–≤–∏—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏** "
        "–¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'strength_endurance'), –æ–±–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω—ã, –Ω–æ **–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–§–ö**. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–Ω—Ü–∏–ø **–†–ê–ú–ü (RAMP)** –¥–ª—è —Ä–∞–∑–º–∏–Ω–∫–∏ (–†–∞–∑–º–∏–Ω–∫–∞, –ê–∫—Ç–∏–≤–∞—Ü–∏—è, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è, –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è). "
        "**–ó–ê–ü–†–ï–©–ï–ù–û:** –í–∫–ª—é—á–∞—Ç—å –≤ –ø–ª–∞–Ω —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫—É –ü—É–º—Å—ç, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–Ω–µ—Ä–∞. "
        "–§–æ—Ä–º–∞—Ç: –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí RAMP-—Ä–∞–∑–º–∏–Ω–∫–∞ ‚Üí 2‚Äì4 —Å—Ç–∞–Ω—Ü–∏–∏ (–≤—Ä–µ–º—è, –ø–æ–¥—Ö–æ–¥—ã/–ø–æ–≤—Ç., RPE, —Ñ–æ–∫—É—Å) ‚Üí –∏–≥—Ä–∞/—Å–ø–∞—Ä—Ä–∏–Ω–≥ (–ª–∞–π—Ç, –æ–ø—Ü.) ‚Üí –∑–∞–º–∏–Ω–∫–∞ ‚Üí **–ó–∞–º–µ—Ç–∫–∏ —Ç—Ä–µ–Ω–µ—Ä—É** (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ **–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –∞–∫—Ü–µ–Ω—Ç—ã** –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞, –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¢–§–ö). "
        "–£—á–∏—Ç—ã–≤–∞–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –ª–æ–∫–∞—Ü–∏—é –∏ –∏–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π."
    )
    # üåü –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –°–ò–°–¢–ï–ú–ù–û–ì–û –ü–†–û–ú–ü–¢–ê

    try:
        messages = [
            {"role": "system", "content": sys},
            {"role": "user", "content": json.dumps({
                "profile": profile,
                "params": params,
                "notes": notes,
                "recent_blocks_14d": recent,
                # üí° –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ goal –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π
                "methodical_focus": (
                    f"–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å (goal): {params.get('goal', '–û–±—â–∞—è')}. "
                    f"–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –æ–¥–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç–∞–∫ –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'speed_agility'). "
                    f"–¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏: {notes}."
                ),
            }, ensure_ascii=False)},
        ]

        resp = client.ChatCompletion.create(
            model=MODEL_NAME, messages=messages, temperature=TEMPERATURE, max_tokens=800
        )
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "üß† GPT\n" –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ front'–µ
        return resp["choices"][0]["message"]["content"].strip()
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª rule_based_coach_plan
        print(f"GPT Error: {e}")
        return None

class CoachParams(BaseModel):
    age_band: str
    group_size: int
    goal: str
    duration: int
    location: str
    inventory: bool = False
    inventory_list: List[str] = []
class CoachPlanRequest(BaseModel):
    user_id: int
    params: CoachParams
    notes: Optional[str] = ""

class SaveTemplateRequest(BaseModel):
    user_id: int
    name: str
    plan: str
    params: Dict[str, Any]

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI(title="KukkiDo API", version="0.1")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
def _startup():
    load_profiles(); load_logs()

@app.post("/api/coach_plan")
def api_coach_plan(req: CoachPlanRequest):
    user_id = req.user_id
    if not user_id:
        raise HTTPException(400, "user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (Telegram.WebApp.initDataUnsafe.user.id)")
    prof = update_profile(user_id, {"role": "coach"})
    params = req.params.dict()
    plan = gpt_coach_plan(prof, user_id, params, req.notes or "") or rule_based_coach_plan(user_id, params)
    add_log_entry(user_id, {"type": "plan", "params": params, "plan": plan})
    return {"plan": plan, "engine": "gpt" if plan.startswith("üß† GPT") else "rule"}

@app.get("/api/templates")
def api_list_templates(user_id: int):
    return {"templates": list_templates(user_id)}

@app.post("/api/templates/save")
def api_save_template(req: SaveTemplateRequest):
    save_template(req.user_id, req.name, req.plan, req.params)
    return {"ok": True}

@app.get("/api/history")
def api_history(user_id: int, limit: int = 10):
    return {"logs": get_logs(user_id, limit=limit)}

@app.get("/api/ping")
def api_ping():
    import datetime as dt
    return {"ok": True, "time": dt.datetime.now(dt.timezone.utc).isoformat()}