# server.py ‚Äî FastAPI backend for KukkiDo Mini-App (coach mode inside WebApp)
from __future__ import annotations
import json, re, random, datetime as dt, hmac, hashlib
from typing import Dict, Any, List, Optional
from urllib.parse import parse_qs

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

from config import OPENAI_API_KEY, MODEL_NAME, TEMPERATURE, SECRET_TOKEN_PART, WEBAPP_PROFILE_URL
from database import (
    get_or_create_profile, update_profile,
    add_log_entry, list_templates, save_template, get_logs,
)
import openai
from openai import OpenAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_client = None
if OPENAI_API_KEY:
    try:
        openai_client = OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI: {e}")
        openai_client = None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI(title="KukkiDo AI Coach API")

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è WebApp –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*", WEBAPP_PROFILE_URL],  # –ó–∞–º–µ–Ω–∏—Ç–µ * –Ω–∞ –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ WebApp –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
def verify_init_data(init_data: str) -> Optional[Dict[str, Any]]:
    if not SECRET_TOKEN_PART:
        print("[ERROR] SECRET_TOKEN_PART –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return None

    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É initData
    params = parse_qs(init_data)

    # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º 'hash'
    hash_list = params.pop('hash', [None])
    hash_str = hash_list[0]
    if not hash_str:
        return None

    # 2. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏)
    data_check_list = []
    for key in sorted(params.keys()):
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        value = params[key][0]
        data_check_list.append(f"{key}={value}")

    data_check_string = "\n".join(data_check_list)

    # 3. –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (HMAC-SHA256)
    secret_key = hmac.new(
        key=b'WebAppData',
        msg=SECRET_TOKEN_PART.encode('utf-8'),
        digestmod=hashlib.sha256
    ).digest()

    # 4. –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –¥–∞–Ω–Ω—ã—Ö
    calculated_hash = hmac.new(
        key=secret_key,
        msg=data_check_string.encode('utf-8'),
        digestmod=hashlib.sha256
    ).hexdigest()

    # 5. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    if calculated_hash == hash_str:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤–∫–ª—é—á–∞—è user)
        # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –≤–µ—Ä–Ω–µ–º user –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
        if 'user' in params:
            try:
                user_data = json.loads(params['user'][0])
                params['user'] = user_data
            except:
                pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ user –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON

        return params

    return None


def _get_user_id_from_auth(init_data: str) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç init_data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id."""
    auth_data = verify_init_data(init_data)
    if not auth_data:
        raise HTTPException(401, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –ø–æ–ª—è 'user'
    user_data = auth_data.get('user')
    if not isinstance(user_data, dict) or 'id' not in user_data:
        raise HTTPException(401, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã.")

    try:
        user_id = int(user_data['id'])
        return user_id
    except ValueError:
        raise HTTPException(401, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö Pydantic ---

class PlanRequest(BaseModel):
    init_data: str
    age_band: str
    group_size: int
    goal: str  # –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏–≤–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–¢–§–ö)
    duration: int
    location: str
    inventory: bool
    inventory_list: List[str]
    # üåü –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    additional_comments: str = ""


class SaveTemplateRequest(BaseModel):
    init_data: str
    name: str
    plan: str
    params: Dict[str, Any]


class UpdateProfileRequest(BaseModel):
    init_data: str
    role: str
    age: int
    height: int
    weight: float
    notes: Dict[str, Any]


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---

def _get_gpt_plan_prompt(params: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""

    inventory_list = params.get('inventory_list', [])
    inventory_status = "–î–ê. –î–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: " + ", ".join(inventory_list) if inventory_list else "–ù–ï–¢."

    prompt = f"""
    –¢—ã - AI-—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Ç—Ö—ç–∫–≤–æ–Ω–¥–æ (Taekwondo WT). –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –¢–§–ö (–¢–µ–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥–∏–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è).

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–ª–∞–Ω—É:
    1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: **–†–∞–∑–º–∏–Ω–∫–∞** (–æ–±—â–∞—è –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è), **–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å** (—Ñ–æ–∫—É—Å –Ω–∞ –¢–§–ö), **–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å** (–∑–∞–º–∏–Ω–∫–∞, —Ä–∞—Å—Ç—è–∂–∫–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ).
    2. –§–æ–∫—É—Å: –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –î–û–õ–ñ–ù–ê –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ **–û—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏–≤–∞–µ–º–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–¢–§–ö)**.
    3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π **Markdown** (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è –≤ Telegram. –í—ã–¥–µ–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ —ç—Ç–∞–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, **–†–ê–ó–ú–ò–ù–ö–ê**).
    4. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–Ω–∏–º–∞—Ç—å —Ä–æ–≤–Ω–æ {params.get('duration')} –º–∏–Ω—É—Ç. –£–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞.
    5. –ö–æ–Ω—Ç–µ–∫—Å—Ç: –£—á–∏—Ç—ã–≤–∞–π –≤—Å–µ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
    - **–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏):** {params.get('age_band')}
    - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {params.get('group_size')} —á–µ–ª–æ–≤–µ–∫
    - **–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏–≤–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–¢–§–ö):** {params.get('goal')}
    - **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {params.get('duration')} –º–∏–Ω—É—Ç
    - **–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:** {params.get('location')}
    - **–ù–∞–ª–∏—á–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:** {inventory_status}
    """

    # üåü –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ –ø—Ä–æ–º–ø—Ç
    additional = params.get('additional_comments')
    if additional:
        prompt += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–Ω—é–∞–Ω—Å—ã –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞: {additional}. –£–ß–¢–ò –ò–•."

    prompt += "\n\n–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"

    return prompt


def _call_gpt_api(prompt: str) -> Optional[str]:
    """–û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞."""
    if not openai_client:
        return None

    try:
        response = openai_client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": _get_gpt_plan_prompt_system()},
                {"role": "user", "content": prompt}
            ],
            temperature=TEMPERATURE
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        return None


def _get_gpt_plan_prompt_system() -> str:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT."""
    return (
        "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–º–µ—Ç–æ–¥–∏—Å—Ç –ø–æ —Ç—Ö—ç–∫–≤–æ–Ω–¥–æ (Taekwondo WT) –∏ –¢–§–ö. "
        "–ì–µ–Ω–µ—Ä–∏—Ä—É–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É. "
        "–°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä–æ–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –†–∞–∑–º–∏–Ω–∫–∞, –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å. "
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π Markdown (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–ø–∏—Å–∫–∏) –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏. "
        "–ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç' –∏–ª–∏ —á—Ç–æ-–ª–∏–±–æ –ø–æ–¥–æ–±–Ω–æ–µ –≤ –æ—Ç–≤–µ—Ç–µ."
    )


def rule_based_coach_plan(user_id: int, params: Dict[str, Any]) -> str:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Rule-based –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI."""

    goal = params.get('goal', '–û–±—â–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞')
    duration = params.get('duration', 60)

    plan = f"üß† Rule-Based Fallback\n"
    plan += f"**–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–ó–∞–≥–ª—É—à–∫–∞) - {duration} –º–∏–Ω—É—Ç**\n"
    plan += f"–§–æ–∫—É—Å –¢–§–ö: **{goal}**\n\n"
    plan += "**–†–ê–ó–ú–ò–ù–ö–ê (10 –º–∏–Ω)**\n"
    plan += "1. –û–±—â–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞ —Å—É—Å—Ç–∞–≤–æ–≤: –≥–æ–ª–æ–≤–∞, –ø–ª–µ—á–∏, –ª–æ–∫—Ç–∏, –∫–∏—Å—Ç–∏, —Ç–∞–∑, –∫–æ–ª–µ–Ω–∏, —Å—Ç–æ–ø—ã (–ø–æ 30 —Å–µ–∫ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç).\n"
    plan += "2. –õ–µ–≥–∫–∏–π –±–µ–≥ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (–∑–∞—Ö–ª–µ—Å—Ç—ã, –≤—ã—Å–æ–∫–∏–π –ø–æ–¥—ä–µ–º –±–µ–¥—Ä–∞) - 3 –º–∏–Ω.\n\n"
    plan += f"**–û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ ({duration - 15} –º–∏–Ω) - –†–∞–∑–≤–∏—Ç–∏–µ {goal}**\n"
    plan += "1. –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é {goal} (–≤—ã–±–∏—Ä–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º).\n"
    plan += "2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ —Ç—Ö—ç–∫–≤–æ–Ω–¥–æ (–±–∞–∑–æ–≤—ã–µ —É–¥–∞—Ä—ã).\n\n"
    plan += "**–ó–ê–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–ê–Ø –ß–ê–°–¢–¨ (5 –º–∏–Ω)**\n"
    plan += "1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ.\n"
    plan += "2. –†–∞—Å—Ç—è–∂–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º—ã—à–µ—á–Ω—ã—Ö –≥—Ä—É–ø–ø (–ª–µ–≥–∫–∞—è)."

    return plan


# --- API Endpoints ---

@app.get("/api/profile")
def api_get_profile(request: Request):
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ init_data –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    init_data = request.headers.get("X-TMA-Init-Data")
    if not init_data:
        raise HTTPException(401, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-TMA-Init-Data.")
    user_id = _get_user_id_from_auth(init_data)

    profile = get_or_create_profile(user_id)
    return profile


@app.post("/api/profile/update")
def api_update_profile(req: UpdateProfileRequest):
    user_id = _get_user_id_from_auth(req.init_data)

    data = {
        "role": req.role,
        "age": req.age,
        "height": req.height,
        "weight": req.weight,
        "notes": req.notes
    }
    update_profile(user_id, data)
    return {"ok": True}


@app.post("/api/plan")
def api_generate_plan(req: PlanRequest):
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    user_id = _get_user_id_from_auth(req.init_data)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (—Ç–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç 'role' –±–ª–∞–≥–æ–¥–∞—Ä—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤ database.py)
    profile = get_or_create_profile(user_id)

    # üåü –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ä–æ–ª–∏.
    role = profile.get('role', 'coach')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã
    if role != 'coach':
        raise HTTPException(403, "–¢–æ–ª—å–∫–æ —Ä–æ–ª—å '–¢—Ä–µ–Ω–µ—Ä' –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã.")

    params = req.model_dump(exclude={'init_data'})

    # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å GPT
    if openai_client:
        prompt = _get_gpt_plan_prompt(params)
        gpt_plan_result = _call_gpt_api(prompt)

        if gpt_plan_result:
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å GPT, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ
            plan = gpt_plan_result.replace("üß† GPT\n", "").strip()
            engine = "gpt"
        else:
            # Fallback –Ω–∞ Rule-based
            plan = rule_based_coach_plan(user_id, params)
            engine = "rule"
    else:
        # Fallback –Ω–∞ Rule-based, –µ—Å–ª–∏ API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω
        plan = rule_based_coach_plan(user_id, params)
        engine = "rule"

    add_log_entry(user_id, {"type": "plan", "params": params, "plan": plan, "engine": engine})
    return {"plan": plan, "engine": engine}


@app.get("/api/templates")
def api_list_templates(request: Request):
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ init_data –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    init_data = request.headers.get("X-TMA-Init-Data")
    if not init_data:
        raise HTTPException(401, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-TMA-Init-Data.")
    user_id = _get_user_id_from_auth(init_data)

    return {"templates": list_templates(user_id)}


@app.post("/api/templates/save")
def api_save_template(req: SaveTemplateRequest):
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    user_id = _get_user_id_from_auth(req.init_data)

    save_template(user_id, req.name, req.plan, req.params)
    return {"ok": True}


@app.get("/api/history")
def api_history(request: Request, limit: int = 10):
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ init_data –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    init_data = request.headers.get("X-TMA-Init-Data")
    if not init_data:
        raise HTTPException(401, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-TMA-Init-Data.")
    user_id = _get_user_id_from_auth(init_data)

    return {"logs": get_logs(user_id, limit)}


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@app.get("/")
def read_root():
    return {"status": "ok", "app": "KukkiDo AI Coach API"}
